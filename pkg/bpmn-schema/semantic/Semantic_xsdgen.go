// Code generated by xsdgen. DO NOT EDIT.

package semantic

import "encoding/xml"

// May be one of ##unspecified, ##WebService
type Anon1 string

// May be one of ##Compensate, ##Image, ##Store
type Anon2 string

type TActivity struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	IsForCompensation     bool       `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int        `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int        `xml:"completionQuantity,attr,omitempty"`
	Default               string     `xml:"default,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TActivity) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TActivity
	var overlay struct {
		*T
		IsForCompensation  *bool `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int  `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int  `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

// May be one of Parallel, Sequential
type TAdHocOrdering string

type TAdHocSubProcess struct {
	Documentation            []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing                 string         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring               string         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef         []xml.Name     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming                 []xml.Name     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing                 []xml.Name     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification          string         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property                 []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation     []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation    []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole             []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics      string         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	LaneSet                  []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL laneSet,omitempty"`
	FlowElement              []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement,omitempty"`
	Artifact                 []string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	CompletionCondition      TExpression    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL completionCondition,omitempty"`
	CancelRemainingInstances bool           `xml:"cancelRemainingInstances,attr,omitempty"`
	Ordering                 TAdHocOrdering `xml:"ordering,attr,omitempty"`
	TriggeredByEvent         bool           `xml:"triggeredByEvent,attr,omitempty"`
	IsForCompensation        bool           `xml:"isForCompensation,attr,omitempty"`
	StartQuantity            int            `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity       int            `xml:"completionQuantity,attr,omitempty"`
	Default                  string         `xml:"default,attr,omitempty"`
	Name                     string         `xml:"name,attr,omitempty"`
}

func (t *TAdHocSubProcess) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TAdHocSubProcess
	var overlay struct {
		*T
		CancelRemainingInstances *bool `xml:"cancelRemainingInstances,attr,omitempty"`
		TriggeredByEvent         *bool `xml:"triggeredByEvent,attr,omitempty"`
		IsForCompensation        *bool `xml:"isForCompensation,attr,omitempty"`
		StartQuantity            *int  `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity       *int  `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CancelRemainingInstances = (*bool)(&overlay.T.CancelRemainingInstances)
	overlay.TriggeredByEvent = (*bool)(&overlay.T.TriggeredByEvent)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TArtifact struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TAssignment struct {
	Documentation     []string    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	From              TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL from"`
	To                TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL to"`
}

type TAssociation struct {
	Documentation        []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements    string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SourceRef            xml.Name              `xml:"sourceRef,attr"`
	TargetRef            xml.Name              `xml:"targetRef,attr"`
	AssociationDirection TAssociationDirection `xml:"associationDirection,attr,omitempty"`
}

func (t *TAssociation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TAssociation
	var overlay struct {
		*T
		AssociationDirection *TAssociationDirection `xml:"associationDirection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.AssociationDirection = (*TAssociationDirection)(&overlay.T.AssociationDirection)
	return d.DecodeElement(&overlay, &start)
}

// May be one of None, One, Both
type TAssociationDirection string

type TAuditing struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TBaseElement struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TBaseElementWithMixedContent struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TBoundaryEvent struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataOutput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutput,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	OutputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSet,omitempty"`
	EventDefinition       []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	CancelActivity        bool       `xml:"cancelActivity,attr,omitempty"`
	AttachedToRef         xml.Name   `xml:"attachedToRef,attr"`
	ParallelMultiple      bool       `xml:"parallelMultiple,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TBoundaryEvent) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TBoundaryEvent
	var overlay struct {
		*T
		CancelActivity   *bool `xml:"cancelActivity,attr,omitempty"`
		ParallelMultiple *bool `xml:"parallelMultiple,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CancelActivity = (*bool)(&overlay.T.CancelActivity)
	overlay.ParallelMultiple = (*bool)(&overlay.T.ParallelMultiple)
	return d.DecodeElement(&overlay, &start)
}

type TBusinessRuleTask struct {
	Documentation         []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	Implementation        TImplementation `xml:"implementation,attr,omitempty"`
	IsForCompensation     bool            `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int             `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int             `xml:"completionQuantity,attr,omitempty"`
	Default               string          `xml:"default,attr,omitempty"`
	Name                  string          `xml:"name,attr,omitempty"`
}

func (t *TBusinessRuleTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TBusinessRuleTask
	var overlay struct {
		*T
		Implementation     *TImplementation `xml:"implementation,attr,omitempty"`
		IsForCompensation  *bool            `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int             `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int             `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Implementation = (*TImplementation)(&overlay.T.Implementation)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TCallActivity struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	CalledElement         xml.Name   `xml:"calledElement,attr,omitempty"`
	IsForCompensation     bool       `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int        `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int        `xml:"completionQuantity,attr,omitempty"`
	Default               string     `xml:"default,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TCallActivity) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TCallActivity
	var overlay struct {
		*T
		IsForCompensation  *bool `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int  `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int  `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TCallChoreography struct {
	Documentation            []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing                 string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring               string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef         []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	ParticipantRef           []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef"`
	CorrelationKey           []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	ParticipantAssociation   []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation,omitempty"`
	CalledChoreographyRef    xml.Name              `xml:"calledChoreographyRef,attr,omitempty"`
	InitiatingParticipantRef xml.Name              `xml:"initiatingParticipantRef,attr"`
	LoopType                 TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	Name                     string                `xml:"name,attr,omitempty"`
}

func (t *TCallChoreography) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TCallChoreography
	var overlay struct {
		*T
		LoopType *TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LoopType = (*TChoreographyLoopType)(&overlay.T.LoopType)
	return d.DecodeElement(&overlay, &start)
}

type TCallConversation struct {
	Documentation          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements      string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ParticipantRef         []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef,omitempty"`
	MessageFlowRef         []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowRef,omitempty"`
	CorrelationKey         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	ParticipantAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation,omitempty"`
	CalledCollaborationRef xml.Name   `xml:"calledCollaborationRef,attr,omitempty"`
	Name                   string     `xml:"name,attr,omitempty"`
}

type TCallableElement struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SupportedInterfaceRef []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	IoBinding             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

type TCancelEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TCatchEvent struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataOutput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutput,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	OutputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSet,omitempty"`
	EventDefinition       []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	ParallelMultiple      bool       `xml:"parallelMultiple,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TCatchEvent) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TCatchEvent
	var overlay struct {
		*T
		ParallelMultiple *bool `xml:"parallelMultiple,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ParallelMultiple = (*bool)(&overlay.T.ParallelMultiple)
	return d.DecodeElement(&overlay, &start)
}

type TCategory struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	CategoryValue     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValue,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
}

type TCategoryValue struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Value             string   `xml:"value,attr,omitempty"`
}

type TChoreography struct {
	Documentation           []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Participant             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participant,omitempty"`
	MessageFlow             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlow,omitempty"`
	Artifact                []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	ConversationNode        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationNode,omitempty"`
	ConversationAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationAssociation,omitempty"`
	ParticipantAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation,omitempty"`
	MessageFlowAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowAssociation,omitempty"`
	CorrelationKey          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	ChoreographyRef         []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyRef,omitempty"`
	ConversationLink        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationLink,omitempty"`
	FlowElement             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement,omitempty"`
	Name                    string     `xml:"name,attr,omitempty"`
	IsClosed                bool       `xml:"isClosed,attr,omitempty"`
}

func (t *TChoreography) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TChoreography
	var overlay struct {
		*T
		IsClosed *bool `xml:"isClosed,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsClosed = (*bool)(&overlay.T.IsClosed)
	return d.DecodeElement(&overlay, &start)
}

type TChoreographyActivity struct {
	Documentation            []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing                 string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring               string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef         []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	ParticipantRef           []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef"`
	CorrelationKey           []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	InitiatingParticipantRef xml.Name              `xml:"initiatingParticipantRef,attr"`
	LoopType                 TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	Name                     string                `xml:"name,attr,omitempty"`
}

func (t *TChoreographyActivity) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TChoreographyActivity
	var overlay struct {
		*T
		LoopType *TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LoopType = (*TChoreographyLoopType)(&overlay.T.LoopType)
	return d.DecodeElement(&overlay, &start)
}

// May be one of None, Standard, MultiInstanceSequential, MultiInstanceParallel
type TChoreographyLoopType string

type TChoreographyTask struct {
	Documentation            []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing                 string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring               string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef         []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	ParticipantRef           []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef"`
	CorrelationKey           []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	MessageFlowRef           []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowRef"`
	InitiatingParticipantRef xml.Name              `xml:"initiatingParticipantRef,attr"`
	LoopType                 TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	Name                     string                `xml:"name,attr,omitempty"`
}

func (t *TChoreographyTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TChoreographyTask
	var overlay struct {
		*T
		LoopType *TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LoopType = (*TChoreographyLoopType)(&overlay.T.LoopType)
	return d.DecodeElement(&overlay, &start)
}

type TCollaboration struct {
	Documentation           []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Participant             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participant,omitempty"`
	MessageFlow             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlow,omitempty"`
	Artifact                []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	ConversationNode        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationNode,omitempty"`
	ConversationAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationAssociation,omitempty"`
	ParticipantAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation,omitempty"`
	MessageFlowAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowAssociation,omitempty"`
	CorrelationKey          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	ChoreographyRef         []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyRef,omitempty"`
	ConversationLink        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationLink,omitempty"`
	Name                    string     `xml:"name,attr,omitempty"`
	IsClosed                bool       `xml:"isClosed,attr,omitempty"`
}

func (t *TCollaboration) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TCollaboration
	var overlay struct {
		*T
		IsClosed *bool `xml:"isClosed,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsClosed = (*bool)(&overlay.T.IsClosed)
	return d.DecodeElement(&overlay, &start)
}

type TCompensateEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	WaitForCompletion bool     `xml:"waitForCompletion,attr,omitempty"`
	ActivityRef       xml.Name `xml:"activityRef,attr,omitempty"`
}

type TComplexBehaviorDefinition struct {
	Documentation     []string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Condition         TFormalExpression   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL condition"`
	Event             TImplicitThrowEvent `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL event,omitempty"`
}

type TComplexGateway struct {
	Documentation       []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements   string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing            string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring          string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef    []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming            []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing            []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	ActivationCondition TExpression       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL activationCondition,omitempty"`
	Default             string            `xml:"default,attr,omitempty"`
	GatewayDirection    TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	Name                string            `xml:"name,attr,omitempty"`
}

func (t *TComplexGateway) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TComplexGateway
	var overlay struct {
		*T
		GatewayDirection *TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.GatewayDirection = (*TGatewayDirection)(&overlay.T.GatewayDirection)
	return d.DecodeElement(&overlay, &start)
}

type TConditionalEventDefinition struct {
	Documentation     []string    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Condition         TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL condition"`
}

type TConversation struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ParticipantRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef,omitempty"`
	MessageFlowRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowRef,omitempty"`
	CorrelationKey    []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TConversationAssociation struct {
	Documentation            []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	InnerConversationNodeRef xml.Name `xml:"innerConversationNodeRef,attr"`
	OuterConversationNodeRef xml.Name `xml:"outerConversationNodeRef,attr"`
}

type TConversationLink struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	SourceRef         xml.Name `xml:"sourceRef,attr"`
	TargetRef         xml.Name `xml:"targetRef,attr"`
}

type TConversationNode struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ParticipantRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef,omitempty"`
	MessageFlowRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowRef,omitempty"`
	CorrelationKey    []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TCorrelationKey struct {
	Documentation          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements      string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	CorrelationPropertyRef []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyRef,omitempty"`
	Name                   string     `xml:"name,attr,omitempty"`
}

type TCorrelationProperty struct {
	Documentation                          []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements                      string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	CorrelationPropertyRetrievalExpression []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyRetrievalExpression"`
	Name                                   string   `xml:"name,attr,omitempty"`
	Type                                   xml.Name `xml:"type,attr,omitempty"`
}

type TCorrelationPropertyBinding struct {
	Documentation          []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements      string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataPath               TFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataPath"`
	CorrelationPropertyRef xml.Name          `xml:"correlationPropertyRef,attr"`
}

type TCorrelationPropertyRetrievalExpression struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	MessagePath       TFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messagePath"`
	MessageRef        xml.Name          `xml:"messageRef,attr"`
}

type TCorrelationSubscription struct {
	Documentation              []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements          string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	CorrelationPropertyBinding []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationPropertyBinding,omitempty"`
	CorrelationKeyRef          xml.Name `xml:"correlationKeyRef,attr"`
}

type TDataAssociation struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SourceRef         []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sourceRef,omitempty"`
	TargetRef         string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetRef"`
	Transformation    TFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL transformation,omitempty"`
	Assignment        []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL assignment,omitempty"`
}

type TDataInput struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataState         string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	ItemSubjectRef    xml.Name `xml:"itemSubjectRef,attr,omitempty"`
	IsCollection      bool     `xml:"isCollection,attr,omitempty"`
}

func (t *TDataInput) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TDataInput
	var overlay struct {
		*T
		IsCollection *bool `xml:"isCollection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsCollection = (*bool)(&overlay.T.IsCollection)
	return d.DecodeElement(&overlay, &start)
}

type TDataInputAssociation struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SourceRef         []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sourceRef,omitempty"`
	TargetRef         string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetRef"`
	Transformation    TFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL transformation,omitempty"`
	Assignment        []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL assignment,omitempty"`
}

type TDataObject struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	DataState         string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState,omitempty"`
	ItemSubjectRef    xml.Name   `xml:"itemSubjectRef,attr,omitempty"`
	IsCollection      bool       `xml:"isCollection,attr,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

func (t *TDataObject) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TDataObject
	var overlay struct {
		*T
		IsCollection *bool `xml:"isCollection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsCollection = (*bool)(&overlay.T.IsCollection)
	return d.DecodeElement(&overlay, &start)
}

type TDataObjectReference struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	DataState         string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState,omitempty"`
	ItemSubjectRef    xml.Name   `xml:"itemSubjectRef,attr,omitempty"`
	DataObjectRef     string     `xml:"dataObjectRef,attr,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TDataOutput struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataState         string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	ItemSubjectRef    xml.Name `xml:"itemSubjectRef,attr,omitempty"`
	IsCollection      bool     `xml:"isCollection,attr,omitempty"`
}

func (t *TDataOutput) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TDataOutput
	var overlay struct {
		*T
		IsCollection *bool `xml:"isCollection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsCollection = (*bool)(&overlay.T.IsCollection)
	return d.DecodeElement(&overlay, &start)
}

type TDataOutputAssociation struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SourceRef         []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL sourceRef,omitempty"`
	TargetRef         string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL targetRef"`
	Transformation    TFormalExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL transformation,omitempty"`
	Assignment        []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL assignment,omitempty"`
}

type TDataState struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
}

type TDataStore struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataState         string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	Capacity          int      `xml:"capacity,attr,omitempty"`
	IsUnlimited       bool     `xml:"isUnlimited,attr,omitempty"`
	ItemSubjectRef    xml.Name `xml:"itemSubjectRef,attr,omitempty"`
}

func (t *TDataStore) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TDataStore
	var overlay struct {
		*T
		IsUnlimited *bool `xml:"isUnlimited,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsUnlimited = (*bool)(&overlay.T.IsUnlimited)
	return d.DecodeElement(&overlay, &start)
}

type TDataStoreReference struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	DataState         string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState,omitempty"`
	ItemSubjectRef    xml.Name   `xml:"itemSubjectRef,attr,omitempty"`
	DataStoreRef      xml.Name   `xml:"dataStoreRef,attr,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TDocumentation struct {
	Item       string `xml:",any"`
	TextFormat string `xml:"textFormat,attr,omitempty"`
}

func (t *TDocumentation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TDocumentation
	var overlay struct {
		*T
		TextFormat *string `xml:"textFormat,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.TextFormat = (*string)(&overlay.T.TextFormat)
	return d.DecodeElement(&overlay, &start)
}

type TEndEvent struct {
	Documentation        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements    string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring           string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef     []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInput,omitempty"`
	DataInputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	InputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSet,omitempty"`
	EventDefinition      []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef   []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	Name                 string     `xml:"name,attr,omitempty"`
}

type TEndPoint struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TError struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	ErrorCode         string   `xml:"errorCode,attr,omitempty"`
	StructureRef      xml.Name `xml:"structureRef,attr,omitempty"`
}

type TErrorEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ErrorRef          xml.Name `xml:"errorRef,attr,omitempty"`
}

type TEscalation struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	EscalationCode    string   `xml:"escalationCode,attr,omitempty"`
	StructureRef      xml.Name `xml:"structureRef,attr,omitempty"`
}

type TEscalationEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	EscalationRef     xml.Name `xml:"escalationRef,attr,omitempty"`
}

type TEvent struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming          []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing          []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TEventBasedGateway struct {
	Documentation     []string               `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string                 `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string                 `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string                 `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming          []xml.Name             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing          []xml.Name             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Instantiate       bool                   `xml:"instantiate,attr,omitempty"`
	EventGatewayType  TEventBasedGatewayType `xml:"eventGatewayType,attr,omitempty"`
	GatewayDirection  TGatewayDirection      `xml:"gatewayDirection,attr,omitempty"`
	Name              string                 `xml:"name,attr,omitempty"`
}

func (t *TEventBasedGateway) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TEventBasedGateway
	var overlay struct {
		*T
		Instantiate      *bool                   `xml:"instantiate,attr,omitempty"`
		EventGatewayType *TEventBasedGatewayType `xml:"eventGatewayType,attr,omitempty"`
		GatewayDirection *TGatewayDirection      `xml:"gatewayDirection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Instantiate = (*bool)(&overlay.T.Instantiate)
	overlay.EventGatewayType = (*TEventBasedGatewayType)(&overlay.T.EventGatewayType)
	overlay.GatewayDirection = (*TGatewayDirection)(&overlay.T.GatewayDirection)
	return d.DecodeElement(&overlay, &start)
}

// May be one of Exclusive, Parallel
type TEventBasedGatewayType string

type TEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TExclusiveGateway struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Default           string            `xml:"default,attr,omitempty"`
	GatewayDirection  TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	Name              string            `xml:"name,attr,omitempty"`
}

func (t *TExclusiveGateway) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TExclusiveGateway
	var overlay struct {
		*T
		GatewayDirection *TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.GatewayDirection = (*TGatewayDirection)(&overlay.T.GatewayDirection)
	return d.DecodeElement(&overlay, &start)
}

type TExpression struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TExtension struct {
	Documentation  []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	Definition     xml.Name `xml:"definition,attr,omitempty"`
	MustUnderstand bool     `xml:"mustUnderstand,attr,omitempty"`
}

func (t *TExtension) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TExtension
	var overlay struct {
		*T
		MustUnderstand *bool `xml:"mustUnderstand,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.MustUnderstand = (*bool)(&overlay.T.MustUnderstand)
	return d.DecodeElement(&overlay, &start)
}

type TExtensionElements []string

func (a TExtensionElements) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	var output struct {
		ArrayType string   `xml:"http://schemas.xmlsoap.org/wsdl/ arrayType,attr"`
		Items     []string `xml:" item"`
	}
	output.Items = []string(a)
	start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{"", "xmlns:ns1"}, Value: "http://www.w3.org/2001/XMLSchema"})
	output.ArrayType = "ns1:anyType[]"
	return e.EncodeElement(&output, start)
}
func (a *TExtensionElements) UnmarshalXML(d *xml.Decoder, start xml.StartElement) (err error) {
	var tok xml.Token
	for tok, err = d.Token(); err == nil; tok, err = d.Token() {
		if tok, ok := tok.(xml.StartElement); ok {
			var item string
			if err = d.DecodeElement(&item, &tok); err == nil {
				*a = append(*a, item)
			}
		}
		if _, ok := tok.(xml.EndElement); ok {
			break
		}
	}
	return err
}

type TFlowElement struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TFlowNode struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming          []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing          []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TFormalExpression struct {
	Documentation      []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements  string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Language           string   `xml:"language,attr,omitempty"`
	EvaluatesToTypeRef xml.Name `xml:"evaluatesToTypeRef,attr,omitempty"`
}

type TGateway struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	GatewayDirection  TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	Name              string            `xml:"name,attr,omitempty"`
}

func (t *TGateway) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TGateway
	var overlay struct {
		*T
		GatewayDirection *TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.GatewayDirection = (*TGatewayDirection)(&overlay.T.GatewayDirection)
	return d.DecodeElement(&overlay, &start)
}

// May be one of Unspecified, Converging, Diverging, Mixed
type TGatewayDirection string

type TGlobalBusinessRuleTask struct {
	Documentation         []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SupportedInterfaceRef []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef,omitempty"`
	IoSpecification       string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	IoBinding             []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding,omitempty"`
	ResourceRole          []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	Implementation        TImplementation `xml:"implementation,attr,omitempty"`
	Name                  string          `xml:"name,attr,omitempty"`
}

func (t *TGlobalBusinessRuleTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TGlobalBusinessRuleTask
	var overlay struct {
		*T
		Implementation *TImplementation `xml:"implementation,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Implementation = (*TImplementation)(&overlay.T.Implementation)
	return d.DecodeElement(&overlay, &start)
}

type TGlobalChoreographyTask struct {
	Documentation            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Participant              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participant,omitempty"`
	MessageFlow              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlow,omitempty"`
	Artifact                 []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	ConversationNode         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationNode,omitempty"`
	ConversationAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationAssociation,omitempty"`
	ParticipantAssociation   []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation,omitempty"`
	MessageFlowAssociation   []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowAssociation,omitempty"`
	CorrelationKey           []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	ChoreographyRef          []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyRef,omitempty"`
	ConversationLink         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationLink,omitempty"`
	FlowElement              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement,omitempty"`
	InitiatingParticipantRef xml.Name   `xml:"initiatingParticipantRef,attr,omitempty"`
	Name                     string     `xml:"name,attr,omitempty"`
	IsClosed                 bool       `xml:"isClosed,attr,omitempty"`
}

func (t *TGlobalChoreographyTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TGlobalChoreographyTask
	var overlay struct {
		*T
		IsClosed *bool `xml:"isClosed,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsClosed = (*bool)(&overlay.T.IsClosed)
	return d.DecodeElement(&overlay, &start)
}

type TGlobalConversation struct {
	Documentation           []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Participant             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participant,omitempty"`
	MessageFlow             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlow,omitempty"`
	Artifact                []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	ConversationNode        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationNode,omitempty"`
	ConversationAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationAssociation,omitempty"`
	ParticipantAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantAssociation,omitempty"`
	MessageFlowAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowAssociation,omitempty"`
	CorrelationKey          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	ChoreographyRef         []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL choreographyRef,omitempty"`
	ConversationLink        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationLink,omitempty"`
	Name                    string     `xml:"name,attr,omitempty"`
	IsClosed                bool       `xml:"isClosed,attr,omitempty"`
}

func (t *TGlobalConversation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TGlobalConversation
	var overlay struct {
		*T
		IsClosed *bool `xml:"isClosed,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsClosed = (*bool)(&overlay.T.IsClosed)
	return d.DecodeElement(&overlay, &start)
}

type TGlobalManualTask struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SupportedInterfaceRef []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	IoBinding             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

type TGlobalScriptTask struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SupportedInterfaceRef []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	IoBinding             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	Script                string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL script,omitempty"`
	ScriptLanguage        string     `xml:"scriptLanguage,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

type TGlobalTask struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SupportedInterfaceRef []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	IoBinding             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

type TGlobalUserTask struct {
	Documentation         []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SupportedInterfaceRef []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef,omitempty"`
	IoSpecification       string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	IoBinding             []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding,omitempty"`
	ResourceRole          []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	Rendering             []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL rendering,omitempty"`
	Implementation        TImplementation `xml:"implementation,attr,omitempty"`
	Name                  string          `xml:"name,attr,omitempty"`
}

func (t *TGlobalUserTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TGlobalUserTask
	var overlay struct {
		*T
		Implementation *TImplementation `xml:"implementation,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Implementation = (*TImplementation)(&overlay.T.Implementation)
	return d.DecodeElement(&overlay, &start)
}

type TGroup struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	CategoryValueRef  xml.Name `xml:"categoryValueRef,attr,omitempty"`
}

type THumanPerformer struct {
	Documentation                []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements            string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ResourceRef                  xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRef,omitempty"`
	ResourceParameterBinding     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameterBinding,omitempty"`
	ResourceAssignmentExpression string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceAssignmentExpression,omitempty"`
	Name                         string   `xml:"name,attr,omitempty"`
}

type TImplementation string

type TImplicitThrowEvent struct {
	Documentation        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements    string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring           string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef     []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInput,omitempty"`
	DataInputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	InputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSet,omitempty"`
	EventDefinition      []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef   []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	Name                 string     `xml:"name,attr,omitempty"`
}

type TInclusiveGateway struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Default           string            `xml:"default,attr,omitempty"`
	GatewayDirection  TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	Name              string            `xml:"name,attr,omitempty"`
}

func (t *TInclusiveGateway) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TInclusiveGateway
	var overlay struct {
		*T
		GatewayDirection *TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.GatewayDirection = (*TGatewayDirection)(&overlay.T.GatewayDirection)
	return d.DecodeElement(&overlay, &start)
}

type TInputOutputBinding struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	OperationRef      xml.Name `xml:"operationRef,attr"`
	InputDataRef      string   `xml:"inputDataRef,attr"`
	OutputDataRef     string   `xml:"outputDataRef,attr"`
}

type TInputOutputSpecification struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataInput         []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInput,omitempty"`
	DataOutput        []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutput,omitempty"`
	InputSet          []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSet"`
	OutputSet         []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSet"`
}

type TInputSet struct {
	Documentation           []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements       string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataInputRefs           []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputRefs,omitempty"`
	OptionalInputRefs       []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL optionalInputRefs,omitempty"`
	WhileExecutingInputRefs []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL whileExecutingInputRefs,omitempty"`
	OutputSetRefs           []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSetRefs,omitempty"`
	Name                    string   `xml:"name,attr,omitempty"`
}

type TInterface struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Operation         []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL operation"`
	Name              string   `xml:"name,attr"`
	ImplementationRef xml.Name `xml:"implementationRef,attr,omitempty"`
}

type TIntermediateCatchEvent struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataOutput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutput,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	OutputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSet,omitempty"`
	EventDefinition       []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	ParallelMultiple      bool       `xml:"parallelMultiple,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TIntermediateCatchEvent) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TIntermediateCatchEvent
	var overlay struct {
		*T
		ParallelMultiple *bool `xml:"parallelMultiple,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ParallelMultiple = (*bool)(&overlay.T.ParallelMultiple)
	return d.DecodeElement(&overlay, &start)
}

type TIntermediateThrowEvent struct {
	Documentation        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements    string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring           string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef     []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInput,omitempty"`
	DataInputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	InputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSet,omitempty"`
	EventDefinition      []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef   []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	Name                 string     `xml:"name,attr,omitempty"`
}

type TItemDefinition struct {
	Documentation     []string  `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	StructureRef      xml.Name  `xml:"structureRef,attr,omitempty"`
	IsCollection      bool      `xml:"isCollection,attr,omitempty"`
	ItemKind          TItemKind `xml:"itemKind,attr,omitempty"`
}

func (t *TItemDefinition) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TItemDefinition
	var overlay struct {
		*T
		IsCollection *bool      `xml:"isCollection,attr,omitempty"`
		ItemKind     *TItemKind `xml:"itemKind,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsCollection = (*bool)(&overlay.T.IsCollection)
	overlay.ItemKind = (*TItemKind)(&overlay.T.ItemKind)
	return d.DecodeElement(&overlay, &start)
}

// May be one of Information, Physical
type TItemKind string

type TLane struct {
	Documentation       []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements   string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	PartitionElement    TBaseElement `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL partitionElement,omitempty"`
	FlowNodeRef         []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowNodeRef,omitempty"`
	ChildLaneSet        TLaneSet     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL childLaneSet,omitempty"`
	Name                string       `xml:"name,attr,omitempty"`
	PartitionElementRef xml.Name     `xml:"partitionElementRef,attr,omitempty"`
}

type TLaneSet struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Lane              []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL lane,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
}

type TLinkEventDefinition struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Source            []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL source,omitempty"`
	Target            xml.Name   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL target,omitempty"`
	Name              string     `xml:"name,attr"`
}

type TLoopCharacteristics struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TManualTask struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	IsForCompensation     bool       `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int        `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int        `xml:"completionQuantity,attr,omitempty"`
	Default               string     `xml:"default,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TManualTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TManualTask
	var overlay struct {
		*T
		IsForCompensation  *bool `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int  `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int  `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TMessage struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	ItemRef           xml.Name `xml:"itemRef,attr,omitempty"`
}

type TMessageEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	OperationRef      xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL operationRef,omitempty"`
	MessageRef        xml.Name `xml:"messageRef,attr,omitempty"`
}

type TMessageFlow struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	SourceRef         xml.Name `xml:"sourceRef,attr"`
	TargetRef         xml.Name `xml:"targetRef,attr"`
	MessageRef        xml.Name `xml:"messageRef,attr,omitempty"`
}

type TMessageFlowAssociation struct {
	Documentation       []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements   string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	InnerMessageFlowRef xml.Name `xml:"innerMessageFlowRef,attr"`
	OuterMessageFlowRef xml.Name `xml:"outerMessageFlowRef,attr"`
}

type TMonitoring struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

// May be one of None, One, All, Complex
type TMultiInstanceFlowCondition string

type TMultiInstanceLoopCharacteristics struct {
	Documentation             []string                    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements         string                      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	LoopCardinality           TExpression                 `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCardinality,omitempty"`
	LoopDataInputRef          xml.Name                    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopDataInputRef,omitempty"`
	LoopDataOutputRef         xml.Name                    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopDataOutputRef,omitempty"`
	InputDataItem             TDataInput                  `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputDataItem,omitempty"`
	OutputDataItem            TDataOutput                 `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputDataItem,omitempty"`
	ComplexBehaviorDefinition []string                    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL complexBehaviorDefinition,omitempty"`
	CompletionCondition       TExpression                 `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL completionCondition,omitempty"`
	IsSequential              bool                        `xml:"isSequential,attr,omitempty"`
	Behavior                  TMultiInstanceFlowCondition `xml:"behavior,attr,omitempty"`
	OneBehaviorEventRef       xml.Name                    `xml:"oneBehaviorEventRef,attr,omitempty"`
	NoneBehaviorEventRef      xml.Name                    `xml:"noneBehaviorEventRef,attr,omitempty"`
}

func (t *TMultiInstanceLoopCharacteristics) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TMultiInstanceLoopCharacteristics
	var overlay struct {
		*T
		IsSequential *bool                        `xml:"isSequential,attr,omitempty"`
		Behavior     *TMultiInstanceFlowCondition `xml:"behavior,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsSequential = (*bool)(&overlay.T.IsSequential)
	overlay.Behavior = (*TMultiInstanceFlowCondition)(&overlay.T.Behavior)
	return d.DecodeElement(&overlay, &start)
}

type TOperation struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	InMessageRef      xml.Name   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inMessageRef"`
	OutMessageRef     xml.Name   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outMessageRef,omitempty"`
	ErrorRef          []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL errorRef,omitempty"`
	Name              string     `xml:"name,attr"`
	ImplementationRef xml.Name   `xml:"implementationRef,attr,omitempty"`
}

type TOutputSet struct {
	Documentation            []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataOutputRefs           []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputRefs,omitempty"`
	OptionalOutputRefs       []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL optionalOutputRefs,omitempty"`
	WhileExecutingOutputRefs []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL whileExecutingOutputRefs,omitempty"`
	InputSetRefs             []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSetRefs,omitempty"`
	Name                     string   `xml:"name,attr,omitempty"`
}

type TParallelGateway struct {
	Documentation     []string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing          string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring        string            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef  []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing          []xml.Name        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	GatewayDirection  TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	Name              string            `xml:"name,attr,omitempty"`
}

func (t *TParallelGateway) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TParallelGateway
	var overlay struct {
		*T
		GatewayDirection *TGatewayDirection `xml:"gatewayDirection,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.GatewayDirection = (*TGatewayDirection)(&overlay.T.GatewayDirection)
	return d.DecodeElement(&overlay, &start)
}

type TParticipant struct {
	Documentation           []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	InterfaceRef            []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL interfaceRef,omitempty"`
	EndPointRef             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL endPointRef,omitempty"`
	ParticipantMultiplicity string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantMultiplicity,omitempty"`
	Name                    string     `xml:"name,attr,omitempty"`
	ProcessRef              xml.Name   `xml:"processRef,attr,omitempty"`
}

type TParticipantAssociation struct {
	Documentation       []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements   string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	InnerParticipantRef xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL innerParticipantRef"`
	OuterParticipantRef xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outerParticipantRef"`
}

type TParticipantMultiplicity struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Minimum           int      `xml:"minimum,attr,omitempty"`
	Maximum           int      `xml:"maximum,attr,omitempty"`
}

func (t *TParticipantMultiplicity) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TParticipantMultiplicity
	var overlay struct {
		*T
		Minimum *int `xml:"minimum,attr,omitempty"`
		Maximum *int `xml:"maximum,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Minimum = (*int)(&overlay.T.Minimum)
	overlay.Maximum = (*int)(&overlay.T.Maximum)
	return d.DecodeElement(&overlay, &start)
}

type TPartnerEntity struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ParticipantRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TPartnerRole struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ParticipantRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TPerformer struct {
	Documentation                []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements            string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ResourceRef                  xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRef,omitempty"`
	ResourceParameterBinding     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameterBinding,omitempty"`
	ResourceAssignmentExpression string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceAssignmentExpression,omitempty"`
	Name                         string   `xml:"name,attr,omitempty"`
}

type TPotentialOwner struct {
	Documentation                []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements            string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ResourceRef                  xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRef,omitempty"`
	ResourceParameterBinding     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameterBinding,omitempty"`
	ResourceAssignmentExpression string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceAssignmentExpression,omitempty"`
	Name                         string   `xml:"name,attr,omitempty"`
}

type TProcess struct {
	Documentation                []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements            string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SupportedInterfaceRef        []xml.Name   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supportedInterfaceRef,omitempty"`
	IoSpecification              string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	IoBinding                    []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioBinding,omitempty"`
	Auditing                     string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring                   string       `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	Property                     []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	LaneSet                      []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL laneSet,omitempty"`
	FlowElement                  []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement,omitempty"`
	Artifact                     []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	ResourceRole                 []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	CorrelationSubscription      []string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationSubscription,omitempty"`
	Supports                     []xml.Name   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL supports,omitempty"`
	ProcessType                  TProcessType `xml:"processType,attr,omitempty"`
	IsClosed                     bool         `xml:"isClosed,attr,omitempty"`
	IsExecutable                 bool         `xml:"isExecutable,attr,omitempty"`
	DefinitionalCollaborationRef xml.Name     `xml:"definitionalCollaborationRef,attr,omitempty"`
	Name                         string       `xml:"name,attr,omitempty"`
}

func (t *TProcess) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TProcess
	var overlay struct {
		*T
		ProcessType *TProcessType `xml:"processType,attr,omitempty"`
		IsClosed    *bool         `xml:"isClosed,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ProcessType = (*TProcessType)(&overlay.T.ProcessType)
	overlay.IsClosed = (*bool)(&overlay.T.IsClosed)
	return d.DecodeElement(&overlay, &start)
}

// May be one of None, Public, Private
type TProcessType string

type TProperty struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	DataState         string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataState,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	ItemSubjectRef    xml.Name `xml:"itemSubjectRef,attr,omitempty"`
}

type TReceiveTask struct {
	Documentation         []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	Implementation        TImplementation `xml:"implementation,attr,omitempty"`
	Instantiate           bool            `xml:"instantiate,attr,omitempty"`
	MessageRef            xml.Name        `xml:"messageRef,attr,omitempty"`
	OperationRef          xml.Name        `xml:"operationRef,attr,omitempty"`
	IsForCompensation     bool            `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int             `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int             `xml:"completionQuantity,attr,omitempty"`
	Default               string          `xml:"default,attr,omitempty"`
	Name                  string          `xml:"name,attr,omitempty"`
}

func (t *TReceiveTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TReceiveTask
	var overlay struct {
		*T
		Implementation     *TImplementation `xml:"implementation,attr,omitempty"`
		Instantiate        *bool            `xml:"instantiate,attr,omitempty"`
		IsForCompensation  *bool            `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int             `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int             `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Implementation = (*TImplementation)(&overlay.T.Implementation)
	overlay.Instantiate = (*bool)(&overlay.T.Instantiate)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TRelationship struct {
	Documentation     []string               `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string                 `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Source            []xml.Name             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL source"`
	Target            []xml.Name             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL target"`
	Type              string                 `xml:"type,attr"`
	Direction         TRelationshipDirection `xml:"direction,attr,omitempty"`
}

// May be one of None, Forward, Backward, Both
type TRelationshipDirection string

type TRendering struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TResource struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ResourceParameter []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameter,omitempty"`
	Name              string   `xml:"name,attr"`
}

type TResourceAssignmentExpression struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Expression        string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL expression"`
}

type TResourceParameter struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	Type              xml.Name `xml:"type,attr,omitempty"`
	IsRequired        bool     `xml:"isRequired,attr,omitempty"`
}

type TResourceParameterBinding struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Expression        string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL expression"`
	ParameterRef      xml.Name `xml:"parameterRef,attr"`
}

type TResourceRole struct {
	Documentation                []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements            string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ResourceRef                  xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRef,omitempty"`
	ResourceParameterBinding     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceParameterBinding,omitempty"`
	ResourceAssignmentExpression string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceAssignmentExpression,omitempty"`
	Name                         string   `xml:"name,attr,omitempty"`
}

type TRootElement struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TScript struct {
	Item string `xml:",any"`
}

type TScriptTask struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	Script                string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL script,omitempty"`
	ScriptFormat          string     `xml:"scriptFormat,attr,omitempty"`
	IsForCompensation     bool       `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int        `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int        `xml:"completionQuantity,attr,omitempty"`
	Default               string     `xml:"default,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TScriptTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TScriptTask
	var overlay struct {
		*T
		IsForCompensation  *bool `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int  `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int  `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TSendTask struct {
	Documentation         []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	Implementation        TImplementation `xml:"implementation,attr,omitempty"`
	MessageRef            xml.Name        `xml:"messageRef,attr,omitempty"`
	OperationRef          xml.Name        `xml:"operationRef,attr,omitempty"`
	IsForCompensation     bool            `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int             `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int             `xml:"completionQuantity,attr,omitempty"`
	Default               string          `xml:"default,attr,omitempty"`
	Name                  string          `xml:"name,attr,omitempty"`
}

func (t *TSendTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TSendTask
	var overlay struct {
		*T
		Implementation     *TImplementation `xml:"implementation,attr,omitempty"`
		IsForCompensation  *bool            `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int             `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int             `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Implementation = (*TImplementation)(&overlay.T.Implementation)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TSequenceFlow struct {
	Documentation       []string    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements   string      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing            string      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring          string      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef    []xml.Name  `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	ConditionExpression TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conditionExpression,omitempty"`
	SourceRef           string      `xml:"sourceRef,attr"`
	TargetRef           string      `xml:"targetRef,attr"`
	IsImmediate         bool        `xml:"isImmediate,attr,omitempty"`
	Name                string      `xml:"name,attr,omitempty"`
}

type TServiceTask struct {
	Documentation         []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	Implementation        TImplementation `xml:"implementation,attr,omitempty"`
	OperationRef          xml.Name        `xml:"operationRef,attr,omitempty"`
	IsForCompensation     bool            `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int             `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int             `xml:"completionQuantity,attr,omitempty"`
	Default               string          `xml:"default,attr,omitempty"`
	Name                  string          `xml:"name,attr,omitempty"`
}

func (t *TServiceTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TServiceTask
	var overlay struct {
		*T
		Implementation     *TImplementation `xml:"implementation,attr,omitempty"`
		IsForCompensation  *bool            `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int             `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int             `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Implementation = (*TImplementation)(&overlay.T.Implementation)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TSignal struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Name              string   `xml:"name,attr,omitempty"`
	StructureRef      xml.Name `xml:"structureRef,attr,omitempty"`
}

type TSignalEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	SignalRef         xml.Name `xml:"signalRef,attr,omitempty"`
}

type TStandardLoopCharacteristics struct {
	Documentation     []string    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	LoopCondition     TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCondition,omitempty"`
	TestBefore        bool        `xml:"testBefore,attr,omitempty"`
	LoopMaximum       int         `xml:"loopMaximum,attr,omitempty"`
}

func (t *TStandardLoopCharacteristics) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TStandardLoopCharacteristics
	var overlay struct {
		*T
		TestBefore *bool `xml:"testBefore,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.TestBefore = (*bool)(&overlay.T.TestBefore)
	return d.DecodeElement(&overlay, &start)
}

type TStartEvent struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataOutput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutput,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	OutputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outputSet,omitempty"`
	EventDefinition       []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	IsInterrupting        bool       `xml:"isInterrupting,attr,omitempty"`
	ParallelMultiple      bool       `xml:"parallelMultiple,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TStartEvent) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TStartEvent
	var overlay struct {
		*T
		IsInterrupting   *bool `xml:"isInterrupting,attr,omitempty"`
		ParallelMultiple *bool `xml:"parallelMultiple,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsInterrupting = (*bool)(&overlay.T.IsInterrupting)
	overlay.ParallelMultiple = (*bool)(&overlay.T.ParallelMultiple)
	return d.DecodeElement(&overlay, &start)
}

type TSubChoreography struct {
	Documentation            []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements        string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing                 string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring               string                `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef         []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing                 []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	ParticipantRef           []xml.Name            `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef"`
	CorrelationKey           []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	FlowElement              []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement,omitempty"`
	Artifact                 []string              `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	InitiatingParticipantRef xml.Name              `xml:"initiatingParticipantRef,attr"`
	LoopType                 TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	Name                     string                `xml:"name,attr,omitempty"`
}

func (t *TSubChoreography) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TSubChoreography
	var overlay struct {
		*T
		LoopType *TChoreographyLoopType `xml:"loopType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LoopType = (*TChoreographyLoopType)(&overlay.T.LoopType)
	return d.DecodeElement(&overlay, &start)
}

type TSubConversation struct {
	Documentation     []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	ParticipantRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL participantRef,omitempty"`
	MessageFlowRef    []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL messageFlowRef,omitempty"`
	CorrelationKey    []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL correlationKey,omitempty"`
	ConversationNode  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL conversationNode,omitempty"`
	Name              string     `xml:"name,attr,omitempty"`
}

type TSubProcess struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	LaneSet               []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL laneSet,omitempty"`
	FlowElement           []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement,omitempty"`
	Artifact              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	TriggeredByEvent      bool       `xml:"triggeredByEvent,attr,omitempty"`
	IsForCompensation     bool       `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int        `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int        `xml:"completionQuantity,attr,omitempty"`
	Default               string     `xml:"default,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TSubProcess) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TSubProcess
	var overlay struct {
		*T
		TriggeredByEvent   *bool `xml:"triggeredByEvent,attr,omitempty"`
		IsForCompensation  *bool `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int  `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int  `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.TriggeredByEvent = (*bool)(&overlay.T.TriggeredByEvent)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TTask struct {
	Documentation         []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	IsForCompensation     bool       `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int        `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int        `xml:"completionQuantity,attr,omitempty"`
	Default               string     `xml:"default,attr,omitempty"`
	Name                  string     `xml:"name,attr,omitempty"`
}

func (t *TTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TTask
	var overlay struct {
		*T
		IsForCompensation  *bool `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int  `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int  `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TTerminateEventDefinition struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
}

type TText struct {
	Item string `xml:",any"`
}

type TTextAnnotation struct {
	Documentation     []string `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Text              string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL text,omitempty"`
	TextFormat        string   `xml:"textFormat,attr,omitempty"`
}

func (t *TTextAnnotation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TTextAnnotation
	var overlay struct {
		*T
		TextFormat *string `xml:"textFormat,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.TextFormat = (*string)(&overlay.T.TextFormat)
	return d.DecodeElement(&overlay, &start)
}

type TThrowEvent struct {
	Documentation        []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements    string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring           string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef     []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing             []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	Property             []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInput            []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInput,omitempty"`
	DataInputAssociation []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	InputSet             string     `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL inputSet,omitempty"`
	EventDefinition      []string   `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinition,omitempty"`
	EventDefinitionRef   []xml.Name `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL eventDefinitionRef,omitempty"`
	Name                 string     `xml:"name,attr,omitempty"`
}

type TTimerEventDefinition struct {
	Documentation     []string    `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements string      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	TimeDate          TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeDate,omitempty"`
	TimeDuration      TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeDuration,omitempty"`
	TimeCycle         TExpression `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL timeCycle,omitempty"`
}

type TTransaction struct {
	Documentation         []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name         `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string             `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	LaneSet               []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL laneSet,omitempty"`
	FlowElement           []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL flowElement,omitempty"`
	Artifact              []string           `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL artifact,omitempty"`
	Method                TTransactionMethod `xml:"method,attr,omitempty"`
	TriggeredByEvent      bool               `xml:"triggeredByEvent,attr,omitempty"`
	IsForCompensation     bool               `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int                `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int                `xml:"completionQuantity,attr,omitempty"`
	Default               string             `xml:"default,attr,omitempty"`
	Name                  string             `xml:"name,attr,omitempty"`
}

func (t *TTransaction) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TTransaction
	var overlay struct {
		*T
		Method             *TTransactionMethod `xml:"method,attr,omitempty"`
		TriggeredByEvent   *bool               `xml:"triggeredByEvent,attr,omitempty"`
		IsForCompensation  *bool               `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int                `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int                `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Method = (*TTransactionMethod)(&overlay.T.Method)
	overlay.TriggeredByEvent = (*bool)(&overlay.T.TriggeredByEvent)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}

type TTransactionMethod string

type TUserTask struct {
	Documentation         []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL documentation,omitempty"`
	ExtensionElements     string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL extensionElements,omitempty"`
	Auditing              string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL auditing,omitempty"`
	Monitoring            string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL monitoring,omitempty"`
	CategoryValueRef      []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL categoryValueRef,omitempty"`
	Incoming              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL incoming,omitempty"`
	Outgoing              []xml.Name      `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL outgoing,omitempty"`
	IoSpecification       string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL ioSpecification,omitempty"`
	Property              []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL property,omitempty"`
	DataInputAssociation  []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataInputAssociation,omitempty"`
	DataOutputAssociation []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL dataOutputAssociation,omitempty"`
	ResourceRole          []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL resourceRole,omitempty"`
	LoopCharacteristics   string          `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL loopCharacteristics,omitempty"`
	Rendering             []string        `xml:"http://www.omg.org/spec/BPMN/20100524/MODEL rendering,omitempty"`
	Implementation        TImplementation `xml:"implementation,attr,omitempty"`
	IsForCompensation     bool            `xml:"isForCompensation,attr,omitempty"`
	StartQuantity         int             `xml:"startQuantity,attr,omitempty"`
	CompletionQuantity    int             `xml:"completionQuantity,attr,omitempty"`
	Default               string          `xml:"default,attr,omitempty"`
	Name                  string          `xml:"name,attr,omitempty"`
}

func (t *TUserTask) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TUserTask
	var overlay struct {
		*T
		Implementation     *TImplementation `xml:"implementation,attr,omitempty"`
		IsForCompensation  *bool            `xml:"isForCompensation,attr,omitempty"`
		StartQuantity      *int             `xml:"startQuantity,attr,omitempty"`
		CompletionQuantity *int             `xml:"completionQuantity,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Implementation = (*TImplementation)(&overlay.T.Implementation)
	overlay.IsForCompensation = (*bool)(&overlay.T.IsForCompensation)
	overlay.StartQuantity = (*int)(&overlay.T.StartQuantity)
	overlay.CompletionQuantity = (*int)(&overlay.T.CompletionQuantity)
	return d.DecodeElement(&overlay, &start)
}
