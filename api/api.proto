syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/wedo-workflow/wedo";

package github.com.wedo_workflow.wedo.api.v1;

// swagger-ui base info,
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Wedo API Doc";
    version: "1.0";
    contact: {
      name: "wedo-workflow/wedo project";
      url: "https://github.com/wedo-workflow/wedo";
      email: "jony4xx@gmail.com";
    };
  };
  host: "wedo-workflow.niuqiang.vip";
  schemes: [HTTPS];
};

service WedoService {
  // Get a deployment.
  rpc DeploymentGet(DeploymentRequest) returns (DeploymentResponse) {
    option (google.api.http) = {
      get : "/deployment/{deployment_id}"
    };
  }
  // Creates a deployment.
  rpc DeploymentCreate(DeploymentCreateRequest) returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post : "/deployment/create"
      body : "*"
    };
  }
  // Updates a deployment.
  rpc DeploymentList(DeploymentListRequest) returns (DeploymentListResponse) {
    option (google.api.http) = {
      get : "/deployments"
    };
  }
  // Delete a deployment.
  rpc DeploymentDelete(DeploymentDeleteRequest) returns (DeploymentDeleteResponse) {
    option (google.api.http) = {
      delete : "/deployment/{deployment_id}"
    };
  }

  // Create a User.
  rpc UserCreate(UserCreateRequest) returns (UserCreateResponse) {
    option (google.api.http) = {
      post : "/user/create"
      body : "*"
    };
  }
  // Get a User.
  rpc UserGet(UserRequest) returns (UserResponse) {
    option (google.api.http) = {
      get : "/user/{user_id}"
    };
  }
  // Delete a User.
  rpc UserDelete(UserDeleteRequest) returns (UserDeleteResponse) {
    option (google.api.http) = {
      delete : "/user/{user_id}"
    };
  }
  // List all Users.
  rpc UserList(UserListRequest) returns (UserListResponse) {
    option (google.api.http) = {
      get : "/users"
    };
  }
  // Update a User.
  rpc UserUpdate(UserUpdateRequest) returns (UserUpdateResponse) {
    option (google.api.http) = {
      put : "/user/{user_id}"
      body : "*"
    };
  }
  rpc UserListCount(UserListCountRequest) returns (UserListCountResponse) {
    option (google.api.http) = {
      get : "/users/count"
    };
  }

  // Create a Namespace.
  rpc NamespaceCreate(NamespaceCreateRequest) returns (NamespaceCreateResponse) {
    option (google.api.http) = {
      post : "/namespace/create"
      body : "*"
    };
  }
  // Get a Namespace.
  rpc NamespaceGet(NamespaceRequest) returns (NamespaceResponse) {
    option (google.api.http) = {
      get : "/namespace/{namespace_id}"
    };
  }
  // Delete a Namespace.
  rpc NamespaceDelete(NamespaceDeleteRequest) returns (NamespaceDeleteResponse) {
    option (google.api.http) = {
      delete : "/namespace/{namespace_id}"
    };
  }
  // List all Namespaces.
  rpc NamespaceList(NamespaceListRequest) returns (NamespaceListResponse) {
    option (google.api.http) = {
      get : "/namespaces"
    };
  }
  // Count all Namespaces.
  rpc NamespaceListCount(NamespaceListCountRequest) returns (NamespaceListCountResponse) {
    option (google.api.http) = {
      get : "/namespaces/count"
    };
  }

  // Namespace User Membership
  // PUT /namespace/{id}/user-members/{userId}
  // DELETE /namespace/{id}/user-members/{userId}
  // Namespace Group Membership
  // PUT /namespace/{id}/group-members/{groupId}
  // DELETE /namespace/{id}/group-members/{groupId}

  // Process Definition

  rpc ProcessDefinitionStart(ProcessDefinitionStartRequest) returns (ProcessDefinitionStartResponse) {
    option (google.api.http) = {
      post : "/process-definition/key/{process_definition_key}/namespace-id/{namespace_id}/start"
      body : "*"
      //      additional_bindings {
      //        post: "/process-definition/{id}/namespace-id/{namespace_id}/start"
      //        body: "*"
      //      }
    };
  }
  rpc ProcessDefinitionGet(ProcessDefinitionRequest) returns (ProcessDefinitionResponse) {
    option (google.api.http) = {
      get : "/process-definition/key/{process_definition_key}/namespace-id/{namespace_id}"
      additional_bindings {
        get: "/process-definition/{id}"
      }
    };
  }

  // Task



  rpc TaskCreate(TaskCreateRequest) returns (TaskCreateResponse) {
    option (google.api.http) = {
      post : "/task/create"
      body : "*"
    };
  }
  rpc TaskGet(TaskRequest) returns (TaskResponse) {
    option (google.api.http) = {
      get : "/task/{task_id}"
    };
  }
  rpc TaskDelete(TaskDeleteRequest) returns (TaskDeleteResponse) {
    option (google.api.http) = {
      delete : "/task/{task_id}"
    };
  }
  rpc TaskList(TaskListRequest) returns (TaskListResponse) {
    option (google.api.http) = {
      get : "/tasks"
    };
  }
}

// Deployment

message DeploymentRequest {
  string deployment_id = 1;
}

message DeploymentResponse {
  string id = 1;
  string name = 2;
  bytes content = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message DeploymentCreateRequest {
  string name = 1;
  bytes content = 2;
  string namespace_id = 3;
}

message DeploymentCreateResponse {
  string id = 1;
  string name = 2;
  bytes content = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message DeploymentListRequest {
}

message DeploymentListResponse {
  repeated DeploymentResponse deployments = 1;
}

message DeploymentDeleteRequest {
  string deployment_id = 1;
}

message DeploymentDeleteResponse {
}

// Namespace

message NamespaceCreateRequest {
  string name = 1;
}

message NamespaceCreateResponse {
  string id = 1;
  string name = 2;
}

message NamespaceRequest {
  string namespace_id = 1;
}

message NamespaceResponse {
  string id = 1;
  string name = 2;
}

message NamespaceDeleteRequest {
  string namespace_id = 1;
}

message NamespaceDeleteResponse {

}

message NamespaceListRequest {
}

message NamespaceListResponse {
  repeated NamespaceResponse namespaces = 1;
}

message NamespaceListCountRequest {
}

message NamespaceListCountResponse {
  int64 count = 1;
}

// User

message UserCreateRequest {
  string name = 1;
  string email = 2;
  string password = 3;
}

message UserCreateResponse {
  string id = 1;
  string name = 2;
}

message UserRequest {
  string user_id = 1;
}

message UserResponse {
  string id = 1;
  string name = 2;
}

message UserDeleteRequest {
  string user_id = 1;
}

message UserDeleteResponse {

}

message UserListRequest {
  string namespace_id = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message UserListResponse {
  repeated UserResponse users = 1;
}

message UserListCountRequest {
  string namespace_id = 1;
}

message UserListCountResponse {
  int64 count = 1;
}

message UserUpdateRequest {
  string user_id = 1;
  string name = 2;
}

message UserUpdateResponse {
  string id = 1;
  string name = 2;
}

// Process Definition

message ProcessDefinitionStartRequest {
  string process_definition_key = 1;
  string namespace_id = 2;
  string id = 3;
}

message ProcessDefinitionStartResponse {
  string process_instance_id = 1;
}

message ProcessDefinitionRequest {
  string process_definition_key = 1;
  string namespace_id = 2;
  string id = 3;
}

message ProcessDefinitionResponse {
  string process_definition_key = 1;
  string namespace_id = 2;
}

// Task

message TaskCreateRequest {
  string id = 1;
  string name = 2;
}

message TaskCreateResponse {
  string id = 1;
  string name = 2;
}

message TaskRequest {
  string task_id = 1;
}

message TaskResponse {
  string id = 1;
  string name = 2;
}

message TaskDeleteRequest {
  string task_id = 1;
}

message TaskDeleteResponse {

}

message TaskListRequest {
  string task_id = 1;
}

message TaskListResponse {
  repeated TaskResponse tasks = 1;
}