syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/wedo-workflow/wedo";

package github.com.wedo_workflow.wedo;

// swagger-ui base info,
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Wedo API Doc";
    version: "1.0.0";
    contact: {
      name: "wedo-workflow/wedo project";
      url: "https://github.com/wedo-workflow/wedo";
      email: "im@jony4.pro";
    };
  };
  host: "demo.wedo.run";
  schemes: [HTTPS];
};

service WedoService {
  // Get a deployment.
  rpc DeploymentGet(DeploymentRequest) returns (DeploymentResponse) {
    option (google.api.http) = {
      get : "/deployment/{deployment_id}"
    };
  }
  // Creates a deployment.
  rpc DeploymentCreate(DeploymentCreateRequest) returns (DeploymentCreateResponse) {
    option (google.api.http) = {
      post : "/deployment/create"
      body : "*"
    };
  }
  // Updates a deployment.
  rpc DeploymentList(DeploymentListRequest) returns (DeploymentListResponse) {
    option (google.api.http) = {
      get : "/deployments"
    };
  }
  // Delete a deployment.
  rpc DeploymentDelete(DeploymentDeleteRequest) returns (DeploymentDeleteResponse) {
    option (google.api.http) = {
      delete : "/deployment/{deployment_id}"
    };
  }

  // Create a User.
  rpc UserCreate(UserCreateRequest) returns (UserCreateResponse) {
    option (google.api.http) = {
      post : "/user/create"
      body : "*"
    };
  }
  // Get a User.
  rpc UserGet(UserRequest) returns (UserResponse) {
    option (google.api.http) = {
      get : "/user/{user_id}"
    };
  }
  // Delete a User.
  rpc UserDelete(UserDeleteRequest) returns (UserDeleteResponse) {
    option (google.api.http) = {
      delete : "/user/{user_id}"
    };
  }
  // List all Users.
  rpc UserList(UserListRequest) returns (UserListResponse) {
    option (google.api.http) = {
      get : "/users"
    };
  }
  // Update a User.
  rpc UserUpdate(UserUpdateRequest) returns (UserUpdateResponse) {
    option (google.api.http) = {
      put : "/user/{user_id}"
      body : "*"
    };
  }
  rpc UserListCount(UserListCountRequest) returns (UserListCountResponse) {
    option (google.api.http) = {
      get : "/users/count"
    };
  }

  // Create a Namespace.
  rpc NamespaceCreate(NamespaceCreateRequest) returns (NamespaceCreateResponse) {
    option (google.api.http) = {
      post : "/namespace/create"
      body : "*"
    };
  }
  // Get a Namespace.
  rpc NamespaceGet(NamespaceRequest) returns (NamespaceResponse) {
    option (google.api.http) = {
      get : "/namespace/{namespace_id}"
    };
  }
  // Delete a Namespace.
  rpc NamespaceDelete(NamespaceDeleteRequest) returns (NamespaceDeleteResponse) {
    option (google.api.http) = {
      delete : "/namespace/{namespace_id}"
    };
  }
  // List all Namespaces.
  rpc NamespaceList(NamespaceListRequest) returns (NamespaceListResponse) {
    option (google.api.http) = {
      get : "/namespaces"
    };
  }
  // Count all Namespaces.
  rpc NamespaceListCount(NamespaceListCountRequest) returns (NamespaceListCountResponse) {
    option (google.api.http) = {
      get : "/namespaces/count"
    };
  }

  // Namespace User Membership
  // PUT /namespace/{id}/user-members/{userId}
  // DELETE /namespace/{id}/user-members/{userId}
  // Namespace Group Membership
  // PUT /namespace/{id}/group-members/{groupId}
  // DELETE /namespace/{id}/group-members/{groupId}

  // Process Definition

  // ProcessDefinitionStart Process Definition Start and return Process Instance ID
  rpc ProcessDefinitionStart(ProcessDefinitionStartRequest) returns (ProcessDefinitionStartResponse) {
    option (google.api.http) = {
      post : "/process-definition/{id}/start"
      body : "*"
      //      post : "/process-definition/key/{process_definition_key}/namespace-id/{namespace_id}/start"
      //      body : "*"
      //      additional_bindings {
      //        post: "/process-definition/{id}/namespace-id/{namespace_id}/start"
      //        body: "*"
      //      }
    };
  }
  // ProcessDefinitionGet get a process definition by business key and namespace id.
  rpc ProcessDefinitionGet(ProcessDefinitionRequest) returns (ProcessDefinitionResponse) {
    option (google.api.http) = {
      get : "/process-definition/{id}"
      //      get : "/process-definition/key/{process_definition_key}/namespace-id/{namespace_id}"
      //      additional_bindings {
      //        get: "/process-definition/{id}"
      //      }
    };
  }

  // Process Instance

  // ProcessInstanceGet get a process instance by id.
  rpc ProcessInstanceGet(ProcessInstanceRequest) returns (ProcessInstanceResponse) {
    option (google.api.http) = {
      get : "/process-instance/{process_instance_id}"
    };
  }

  // todo ProcessModify modify a process instance.
  rpc ProcessModify(ProcessModifyRequest) returns (ProcessModifyResponse) {
    option (google.api.http) = {
      put : "/process-instance/{process_instance_id}"
      body : "*"
    };
  }

  // todo Process Activate/Suspend a process instance.
  rpc ProcessActivateSuspend(ProcessActivateSuspendRequest) returns (ProcessActivateSuspendResponse) {
    option (google.api.http) = {
      post : "/process-instance/{process_instance_id}/suspended"
    };
  }

  // Task

  // TaskCreate create a task.
  rpc TaskCreate(TaskCreateRequest) returns (TaskCreateResponse) {
    option (google.api.http) = {
      post : "/task/create"
      body : "*"
    };
  }
  // TaskGet get a task by id.
  rpc TaskGet(TaskRequest) returns (TaskResponse) {
    option (google.api.http) = {
      get : "/task/{task_id}"
    };
  }
  // TaskDelete delete a task.
  rpc TaskDelete(TaskDeleteRequest) returns (TaskDeleteResponse) {
    option (google.api.http) = {
      delete : "/task/{task_id}"
    };
  }
  // TaskList list all tasks By Process Instance ID.
  rpc TaskList(TaskListRequest) returns (TaskListResponse) {
    option (google.api.http) = {
      get : "/tasks"
    };
  }
  // todo TaskClaim claim a task.
  rpc TaskClaim(TaskClaimRequest) returns (TaskClaimResponse) {
    option (google.api.http) = {
      put : "/task/{task_id}/claim"
    };
  }
  // todo TaskUnclaim unclaim a task.
  rpc TaskUnclaim(TaskUnclaimRequest) returns (TaskUnclaimResponse) {
    option (google.api.http) = {
      put : "/task/{task_id}/unclaim"
    };
  }
  // todo TaskDelegate delegate a task.
  rpc TaskDelegate(TaskDelegateRequest) returns (TaskDelegateResponse) {
    option (google.api.http) = {
      put : "/task/{task_id}/delegate"
    };
  }
  // todo TaskAssign assign a task.
  rpc TaskAssign(TaskAssignRequest) returns (TaskAssignResponse) {
    option (google.api.http) = {
      put : "/task/{task_id}/assign"
    };
  }
  // todo TaskComplete complete a task.
  rpc TaskComplete(TaskCompleteRequest) returns (TaskCompleteResponse) {
    option (google.api.http) = {
      put : "/task/{task_id}/complete"
    };
  }
  // todo TaskGetFormKey get a form key from a task.
  rpc TaskGetFormKey(TaskGetFormKeyRequest) returns (TaskGetFormKeyResponse) {
    option (google.api.http) = {
      get : "/task/{task_id}/form-key"
    };
  }
  // todo TaskSubmitForm submit a form to a task.
  rpc TaskSubmitForm(TaskSubmitFormRequest) returns (TaskSubmitFormResponse) {
    option (google.api.http) = {
      post : "/task/{task_id}/submit-form"
      body : "*"
    };
  }
  // todo TaskResolve resolve a task.
  rpc TaskResolve(TaskResolveRequest) returns (TaskResolveResponse) {
    option (google.api.http) = {
      put : "/task/{task_id}/resolve"
    };
  }
  // todo TaskDeployedForm get task's deployed form.
  rpc TaskDeployedForm(TaskDeployedFormRequest) returns (TaskDeployedFormResponse) {
    option (google.api.http) = {
      get : "/task/{task_id}/deployed-form"
    };
  }
}

// Deployment

message DeploymentRequest {
  string deployment_id = 1;
}

message DeploymentResponse {
  string id = 1;
  string name = 2;
  bytes content = 3;
  google.protobuf.Timestamp timestamp = 4;
  string process_definition_id = 5;
}

message DeploymentCreateRequest {
  string name = 1;
  bytes content = 2;
  string namespace_id = 3;
}

message DeploymentCreateResponse {
  string id = 1;
  string name = 2;
  bytes content = 3;
  google.protobuf.Timestamp timestamp = 4;
  string namespace_id = 5;
  string process_definition_id = 6;
}

message DeploymentListRequest {
}

message DeploymentListResponse {
  repeated DeploymentResponse deployments = 1;
}

message DeploymentDeleteRequest {
  string deployment_id = 1;
}

message DeploymentDeleteResponse {
}

// Namespace

message NamespaceCreateRequest {
  string name = 1;
}

message NamespaceCreateResponse {
  string id = 1;
  string name = 2;
}

message NamespaceRequest {
  string namespace_id = 1;
}

message NamespaceResponse {
  string id = 1;
  string name = 2;
}

message NamespaceDeleteRequest {
  string namespace_id = 1;
}

message NamespaceDeleteResponse {

}

message NamespaceListRequest {
}

message NamespaceListResponse {
  repeated NamespaceResponse namespaces = 1;
}

message NamespaceListCountRequest {
}

message NamespaceListCountResponse {
  int64 count = 1;
}

// User

message UserCreateRequest {
  string name = 1;
  string email = 2;
  string password = 3;
}

message UserCreateResponse {
  string id = 1;
  string name = 2;
}

message UserRequest {
  string user_id = 1;
}

message UserResponse {
  string id = 1;
  string name = 2;
}

message UserDeleteRequest {
  string user_id = 1;
}

message UserDeleteResponse {

}

message UserListRequest {
  string namespace_id = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message UserListResponse {
  repeated UserResponse users = 1;
}

message UserListCountRequest {
  string namespace_id = 1;
}

message UserListCountResponse {
  int64 count = 1;
}

message UserUpdateRequest {
  string user_id = 1;
  string name = 2;
}

message UserUpdateResponse {
  string id = 1;
  string name = 2;
}

// Process Definition

message ProcessDefinitionStartRequest {
  string id = 1;
  string process_definition_key = 2;
  string namespace_id = 3;
}

message ProcessDefinitionStartResponse {
  string process_instance_id = 1;
}

message ProcessDefinitionRequest {
  string process_definition_key = 1;
  string namespace_id = 2;
  string id = 3;
}

message ProcessDefinitionResponse {
  string id = 1;
  string process_definition_key = 2;
  string namespace_id = 3;
}

// Process Instance

message ProcessInstanceRequest {
  string process_instance_id = 1;
}

message ProcessInstanceResponse {
  string process_instance_id = 1;
  string process_definition_key = 2;
  string namespace_id = 3;
  ProcessInstanceState state = 4;
}

enum ProcessInstanceState {
  INITIALIZED = 0;
  STARTED = 1;
  COMPLETED = 2;
  ABORTED = 3;
  FAILED = 4;
}

message ProcessModifyRequest {
  string process_instance_id = 1;
  string process_definition_key = 2;
  string namespace_id = 3;
  string id = 4;
}

message ProcessModifyResponse {

}

message ProcessActivateSuspendRequest {
  string process_instance_id = 1;
  bool suspend = 2;
}

message ProcessActivateSuspendResponse {

}

// Task

message TaskCreateRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  string assignee = 4;
  string owner = 5;
  string delegation_state = 6;
  google.protobuf.Timestamp due = 7;
  string priority = 8;
  string parent_task_id = 9;
  string process_instance_id = 10;
  string task_definition_key = 11;
  string namespace_id = 13;
  string form_key = 14;
  google.protobuf.Timestamp follow_up_date = 15;
}

enum DelegationState {
  PENDING = 0;
  RESOLVED = 1;
}

message TaskCreateResponse {
  string id = 1;
  string name = 2;
}

message TaskRequest {
  string task_id = 1;
}

message TaskResponse {
  string id = 1;
  string name = 2;
  string description = 3;
  string assignee = 4;
  string owner = 5;
  string delegation_state = 6;
  google.protobuf.Timestamp due = 7;
  string priority = 8;
  string parent_task_id = 9;
  string process_instance_id = 10;
  string task_definition_key = 11;
  string namespace_id = 13;
  string form_key = 14;
  google.protobuf.Timestamp follow_up_date = 15;
}

message TaskDeleteRequest {
  string task_id = 1;
}

message TaskDeleteResponse {

}

message TaskListRequest {
  string process_instance_id = 1;
}

message TaskListResponse {
  repeated TaskResponse tasks = 1;
}

message TaskClaimRequest {
  string task_id = 1;
}

message TaskClaimResponse {

}

message TaskUnclaimRequest {
  string task_id = 1;
}

message TaskUnclaimResponse {

}

message TaskDelegateRequest {
  string task_id = 1;
  string user_id = 2;
}

message TaskDelegateResponse {

}

message TaskAssignRequest {
  string task_id = 1;
  string user_id = 2;
}

message TaskAssignResponse {

}

message TaskCompleteRequest {
  string task_id = 1;
}

message TaskCompleteResponse {

}

message TaskGetFormKeyRequest {
  string task_id = 1;
}

message TaskGetFormKeyResponse {
  string form_key = 1;
}

message TaskSubmitFormRequest {
  string task_id = 1;
  string form_key = 2;
  string form_data = 3;
}

message TaskSubmitFormResponse {

}

message TaskResolveRequest {
  string task_id = 1;
}

message TaskResolveResponse {

}

message TaskDeployedFormRequest {
  string task_id = 1;
}

message TaskDeployedFormResponse {
  string form_key = 1;
  string form_data = 2;
}